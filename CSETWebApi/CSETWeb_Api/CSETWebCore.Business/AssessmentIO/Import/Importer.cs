//////////////////////////////// 
// 
//   Copyright 2025 Battelle Energy Alliance, LLC  
// 
// 
//////////////////////////////// 
using CSETWebCore.Business.Assessment;
using CSETWebCore.Business.Contact;
using CSETWebCore.Business.AssessmentIO.Models.AutoGenerated;
using CSETWebCore.Business.Maturity;
using CSETWebCore.DataLayer.Model;
using CSETWebCore.Interfaces.Helpers;
using CSETWebCore.Model.Assessment;
using Nelibur.ObjectMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using CSETWebCore.Business.Demographic;

namespace CSETWebCore.Business.AssessmentIO.Import
{
    public class Importer
    {
        /// <summary>
        /// Maps old keys to new keys.
        /// </summary>
        Dictionary<string, Dictionary<int, int>> mapIdentity = new Dictionary<string, Dictionary<int, int>>();

        private UploadAssessmentModel _model;
        private int? _currentUserId;
        private string _primaryEmail;
        private string _accessKey;
        private CSETContext _context;
        private ITokenManager _token;
        private IAssessmentUtil _assessmentUtil;
        private IUtilities _utilities;

        private AssessmentBusiness _assessmentBiz;
        private MaturityBusiness _mb;
        private ContactBusiness _cb;


        /// <summary>
        /// 
        /// </summary>
        public Importer(UploadAssessmentModel model,
            int? currentUserId, string primaryEmail, string accessKey,
            CSETContext context, ITokenManager token, IAssessmentUtil assessmentUtil,
            IUtilities utilities)
        {
            _model = model;
            _currentUserId = currentUserId;
            _primaryEmail = primaryEmail;
            _accessKey = accessKey;
            _context = context;
            _token = token;
            _assessmentUtil = assessmentUtil;
            _utilities = utilities;

            _mb = new Maturity.MaturityBusiness(_context, null, null);
            _cb = new Contact.ContactBusiness(_context, _assessmentUtil, _token, null, null, null);
            _assessmentBiz = new AssessmentBusiness(null, _token, _utilities, _cb, null, _mb, _assessmentUtil, null, null, _context);
           
        


            //ignore the emass document we are not using it anyway.
            TinyMapper.Bind<jINFORMATION, INFORMATION>(config =>
            {
                config.Ignore(x => x.eMass_Document_Id);
                config.Ignore(x => x.Id);
            });
            TinyMapper.Bind<jASSESSMENT_CONTACTS, ASSESSMENT_CONTACTS>(config =>
            {
                config.Ignore(x => x.Assessment_Contact_Id);
            });
            TinyMapper.Bind<jFINDING, FINDING>(config =>
             {
                 config.Ignore(x => x.Finding_Id);
             });
        }


        /// <summary>
        /// Populates a few principal assessment tables.
        /// </summary>
        /// <returns></returns>
        public int RunImportManualPortion(bool overwriteAssessment)
        {
            //create the new assessment / get existing assessment if overwrite is true
            //copy each of the items to the table 
            //as the copy occurs change to the current assessment_id
            //update the answer id's             

            Dictionary<int, DOCUMENT_FILE> oldIdToNewDocument = new Dictionary<int, DOCUMENT_FILE>();
            Guid assessmentGuid = _model.jASSESSMENTS.FirstOrDefault().Assessment_GUID;

            AssessmentDetail detail = _assessmentBiz.GetAssessmentDetail(assessmentGuid);

            // If no assessment exists with given GUID, import using provided GUID
            if (detail == null)
            {
                detail = _assessmentBiz.CreateNewAssessmentForImport(_currentUserId, _accessKey, assessmentGuid);
            }
            else if (!overwriteAssessment) 
            {
                // At this point we know the assessment with provided GUID already exists.
                // If we are not overwriting an assessment, create a new assessment for import with new GUID.
                // Otherwise, the code will carry on using the existing assessment detail object to "overwrite" it.
                detail = _assessmentBiz.CreateNewAssessmentForImport(_currentUserId, _accessKey);
            }

            int assessmentId = detail.Id;

            if (overwriteAssessment)
            {
               SyncOverwrite(assessmentId);
            }

            Dictionary<string, int> oldUserNewUser = _context.USERS.ToDictionary(x => x.PrimaryEmail, y => y.UserId);

            foreach (var a in _model.jASSESSMENTS)
            {
                var item = _context.ASSESSMENTS.Where(x => x.Assessment_Id == assessmentId).FirstOrDefault();
                if (item != null)
                {
                    item.Diagram_Markup = a.Diagram_Markup;
                    item.Diagram_Image = a.Diagram_Image;

                    item.Assets = a.Assets;
                    item.Charter = a.Charter;
                    item.CreditUnionName = a.CreditUnionName;
                    item.IRPTotalOverride = a.IRPTotalOverride;
                    item.IRPTotalOverrideReason = a.IRPTotalOverrideReason;
                    item.MatDetail_targetBandOnly = a.MatDetail_targetBandOnly;

                    _context.SaveChanges();
                }
            }
            // go through the assessment contacts and: 
            // - if the contact not does exist create it then add the id
            // - if the contact does exist update the id
            var dictAC = new Dictionary<int, int>();
            foreach (var a in _model.jASSESSMENT_CONTACTS)
            {
                // Don't create another primary contact, but map its ID
                if (a.PrimaryEmail == _primaryEmail)
                {
                    var newPrimaryContact = _context.ASSESSMENT_CONTACTS.Where(x => x.PrimaryEmail == _primaryEmail && x.Assessment_Id == assessmentId).FirstOrDefault();
                    dictAC.Add(a.Assessment_Contact_Id, newPrimaryContact.Assessment_Contact_Id);
                    continue;
                }

                if (overwriteAssessment)
                {
                    //Refresh sync contact record 
                    var contactToSync = _context.ASSESSMENT_CONTACTS
                        .Where(x => x.PrimaryEmail == _primaryEmail && x.Assessment_Id == assessmentId)
                        .FirstOrDefault();

                    if (contactToSync == null)
                    {
                        var originalContact = _context.ASSESSMENT_CONTACTS.Where(x => x.PrimaryEmail == _primaryEmail)
                            .FirstOrDefault();
                        var refreshContact = new ASSESSMENT_CONTACTS();
                        refreshContact.Assessment_Id = assessmentId;
                        refreshContact.PrimaryEmail = _primaryEmail;
                        refreshContact.UserId = originalContact.UserId;
                        refreshContact.FirstName = originalContact.FirstName;
                        refreshContact.LastName = originalContact.LastName;
                        refreshContact.Invited = originalContact.Invited;
                        refreshContact.Phone = originalContact.Phone;
                        refreshContact.Title = originalContact.Title;
                        //If they have removed this assessment on enterprise and this contact is being re-added, they are demoted to a user role. 
                        refreshContact.AssessmentRoleId = 1;

                        _context.ASSESSMENT_CONTACTS.Add(refreshContact);
                        _context.SaveChanges();
                    }
                }

                var item = TinyMapper.Map<ASSESSMENT_CONTACTS>(a);
                item.Assessment_Id = assessmentId;
                item.PrimaryEmail = a.PrimaryEmail;
                
                //Skip contact if it already exists within the assessment 
                var contactExists = _context.ASSESSMENT_CONTACTS.Where(x => x.PrimaryEmail == item.PrimaryEmail && x.Assessment_Id == assessmentId).FirstOrDefault();
                if (contactExists != null)
                {
                    continue; 
                }
                
                

                if (a?.PrimaryEmail != null
                    && oldUserNewUser.TryGetValue(a.PrimaryEmail, out int userid))
                {
                    item.UserId = userid;
                }
                else
                {
                    item.UserId = null;
                }

                _context.ASSESSMENT_CONTACTS.Add(item);
                _context.SaveChanges();
                int newId;
                if (a.Assessment_Contact_Id != 0)
                {
                    if (dictAC.TryGetValue(a.Assessment_Contact_Id, out newId))
                    {
                        dictAC.Add(newId, newId);
                        a.Assessment_Contact_Id = newId;
                    }
                    else
                    {
                        dictAC.Add(a.Assessment_Contact_Id, item.Assessment_Contact_Id);
                    }
                }
            }

            // map the primary keys so that they can be passed to the generic import logic
            this.mapIdentity.Add("ASSESSMENT_CONTACTS", dictAC);


            //
            foreach (var a in _model.jUSER_DETAIL_INFORMATION)
            {
                if (_context.USER_DETAIL_INFORMATION.Where(x => x.Id == a.Id).FirstOrDefault() == null)
                {
                    var userInfo = TinyMapper.Map<USER_DETAIL_INFORMATION>(a);
                    userInfo.FirstName = String.IsNullOrWhiteSpace(a.FirstName) ? "First Name" : a.FirstName;
                    userInfo.LastName = String.IsNullOrWhiteSpace(a.LastName) ? "Last Name" : a.LastName;
                    _context.USER_DETAIL_INFORMATION.Add(userInfo);
                    foreach (var b in a.jADDRESSes)
                    {
                        var item = TinyMapper.Map<ADDRESS>(b);
                        item.AddressType = "Imported";
                        _context.ADDRESS.Add(item);
                    }
                    _context.SaveChanges();
                }
            }

            return assessmentId;
        }


        /// <summary>
        /// Processes the rest of the tables automatically. 
        /// </summary>
        /// <param name="jsonObject"></param>
        /// <param name="context"></param>
        internal void RunImportAutomatic(int assessmentId, string jsonObject, CSETContext context)
        {
            var genericImporter = new GenericImporter(assessmentId);
            genericImporter.SetManualIdentityMaps(this.mapIdentity);
            genericImporter.SaveFromJson(jsonObject, context);
        }


        /// <summary>
        /// Does a few final housekeeping tasks once all of the records have been imported.
        /// </summary>
        /// <param name="assessmentId"></param>
        public void Finalize(int assessmentId)
        {
            // set the feature flags on the ASSESSMENTS record
            _assessmentBiz.SetFeaturesOnAssessmentRecord(assessmentId);
        }

        public void SyncOverwrite(int assessmentId)
        {
            foreach (var answer in _model.jANSWER)
            {
                var currentAnswer = _context.ANSWER.Where(x => x.Assessment_Id == assessmentId && x.Question_Or_Requirement_Id == answer.Question_Or_Requirement_Id).FirstOrDefault();
                if (currentAnswer == null)
                {
                    currentAnswer = new ANSWER();
                }
                currentAnswer.Assessment_Id = assessmentId;
                currentAnswer.Question_Type = answer.Question_Type;
                currentAnswer.Question_Number = answer.Question_Number;
                currentAnswer.Answer_Text = answer.Answer_Text;
                currentAnswer.Mat_Option_Id = answer.Mat_Option_Id;
                currentAnswer.Alternate_Justification = answer.Alternate_Justification; 
                currentAnswer.Free_Response_Answer = answer.Free_Response_Answer;
                currentAnswer.Comment = answer.Comment;
                currentAnswer.FeedBack = answer.FeedBack; 
                currentAnswer.Mark_For_Review = answer.Mark_For_Review ?? false;
                currentAnswer.Component_Guid = answer.Component_Guid;
                currentAnswer.Reviewed = answer.Reviewed;
                currentAnswer.Is_Requirement = answer.Is_Requirement;
                currentAnswer.Is_Component = answer.Is_Component;
                currentAnswer.Is_Maturity = answer.Is_Maturity;

                _context.SaveChanges();
            }
            
            foreach (var demographics in _model.jDEMOGRAPHICS)
            {
                var current = _context.DEMOGRAPHICS.Where(x => x.Assessment_Id == assessmentId).FirstOrDefault();
                if (current == null)
                {
                    current = new DEMOGRAPHICS();
                }
                current.Assessment_Id = assessmentId;
                current.SectorId = demographics.SectorId;
                current.IndustryId = demographics.IndustryId;
                current.Size = demographics.Size;
                current.AssetValue = demographics.AssetValue;
                current.NeedsPrivacy = demographics.NeedsPrivacy;
                current.NeedsSupplyChain = demographics.NeedsSupplyChain;
                current.NeedsICS = demographics.NeedsICS;
                current.OrganizationName = demographics.OrganizationName;
                current.Agency = demographics.Agency;
                current.OrganizationType = demographics.OrganizationType;
                // current.Facilitator = demographics.Facilitator; // Skipping sync until contacts logic is determined
                // current.PointOfContact = demographics.PointOfContact; // Skipping sync until contacts logic is determined 
                current.IsScoped = demographics.IsScoped;
                current.CriticalService = demographics.CriticalService;
            }

            foreach (var demographics in _model.jDETAILS_DEMOGRAPHICS)
            {
                var currentDemos = _context.DETAILS_DEMOGRAPHICS.Where(x => x.Assessment_Id == assessmentId).ToList();
                var _demographicExtBiz = new DemographicExtBusiness(_context);
                if (demographics.StringValue != null)
                {
                    var value = demographics.StringValue;
                    _demographicExtBiz.SaveX(assessmentId, demographics.DataItemName, value);
                }
                else if (demographics.IntValue != null)
                {
                    var value = demographics.IntValue;
                    _demographicExtBiz.SaveX(assessmentId, demographics.DataItemName, value);
                }
                else if (demographics.FloatValue != null)
                {
                    var value = demographics.FloatValue;
                    _demographicExtBiz.SaveX(assessmentId, demographics.DataItemName, value);
                }
                else if (demographics.BoolValue != null)
                {
                    var value = demographics.BoolValue;
                    _demographicExtBiz.SaveX(assessmentId, demographics.DataItemName, value);
                }
                else if (demographics.DateTimeValue != null)
                {
                    var value = demographics.DateTimeValue;
                    _demographicExtBiz.SaveX(assessmentId, demographics.DataItemName, value);
                }
            }
        }
    }
}

